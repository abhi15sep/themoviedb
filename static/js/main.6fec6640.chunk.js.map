{"version":3,"sources":["reducers/movieDetails.js","constants/ActionTypes.js","reducers/movieList.js","store/configureStore.js","constants/MuiConstants.js","components/Favourites/index.js","selectors/CommonSelectors.js","utils/ApiUtils.js","constants/ApiConstants.js","constants/Schemas.js","actions/MovieListActions.js","components/Search/index.js","containers/SearchContainer.js","actions/SearchActions.js","components/Header/index.js","constants/RouterConstants.js","containers/HeaderContainer.js","actions/MovieDetailsActions.js","components/MovieDetails/index.js","containers/MovieDetailsContainer.js","components/Card/index.js","components/MovieList/index.js","containers/MovieListContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","currentMovieId","details","isFetching","movieDetails","state","arguments","length","undefined","action","type","Object","objectSpread","hasMore","movies","genres","movieList","toConsumableArray","concat","newMovies","LOCATION_CHANGE","configureStore","history","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","router","connectRouter","reducers","applyMiddleware","routerMiddleware","thunkMiddleware","CUSTOM_THEME","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","Favourites","react_default","a","createElement","className","getPathName","location","pathname","callApi","url","options","fetch","then","response","ok","json","Promise","reject","text","error","camelize","catch","constructUrl","indexOf","GENRE_LIST_URL","MOVIE_DETAILS_URL","POPULAR_MOVIES_URL","SEARCH_MOVIES_URL","genre","schema","Entity","define","genreSchema","fetchMoviesSuccess","page","totalPages","results","Search","onSubmit","ev","preventDefault","query","target","search","value","searchMovies","_this","props","this","TextField_default","id","label","autoComplete","Component","connect","dispatch","getState","path","nextPath","push","components_Search","disableLink","e","Header","_ref","subheading","currentPathName","Link","to","onClick","containers_SearchContainer","constructSubHeading","pathName","test","originalTitle","getMovieTitle","slice","components_Header","fetchMovieDetailsSuccess","MovieDetails","fetchMovieDetails","_this$props","react","src","posterPath","alt","title","width","budget","popularity","productionCountries","map","country","iso31661","join","releaseDate","overview","onwProps","movieId","match","params","asyncToGenerator","regenerator_default","mark","_callee","_ref2","wrap","_context","prev","next","replace","sent","stop","_x","apply","components_MovieDetails","Card","genreIds","Typography_default","variant","gutterBottom","genreId","name","MovieList","components_Card","key","MovieListContainer","getGenres","_this$props2","loadMovies","loader","react_infinite_scroller_default","loadMore","components_MovieList","defaultProps","ownProps","fetchSearchMovies","fetchPopularMovies","_ref4","_callee2","_ref5","_normalize","entities","_context2","normalize","_x2","createHashHistory","store","App","styles","theme","es","lib","containers_HeaderContainer","components_Favourites","Route","exact","render","Redirect","component","MovieDetailsContainer","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fec6640.chunk.js","sourcesContent":["import * as types from '../constants/ActionTypes';\n\nconst initialState = {\n  currentMovieId: null,\n  details: {},\n  isFetching: true,\n};\n\nexport const movieDetails = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_MOVIE_DETAILS_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case types.FETCH_MOVIE_DETAILS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        currentMovieId: action.currentMovieId,\n        details: action.details,\n      };\n    default:\n      return state;\n  }\n};\n","export const FETCH_GENRES_REQUEST = 'FETCH_GENRES_REQUEST';\nexport const FETCH_GENRES_SUCCESS = 'FETCH_GENRES_SUCCESS';\nexport const FETCH_MOVIE_DETAILS_REQUEST = 'FETCH_MOVIE_DETAILS_REQUEST';\nexport const FETCH_MOVIE_DETAILS_SUCCESS = 'FETCH_MOVIE_DETAILS_SUCCESS';\nexport const FETCH_MOVIES_REQUEST = 'FETCH_MOVIES_REQUEST';\nexport const FETCH_MOVIES_SUCCESS = 'FETCH_MOVIES_SUCCESS';\n","import { LOCATION_CHANGE } from 'connected-react-router';\nimport * as types from '../constants/ActionTypes';\n\nconst initialState = {\n  hasMore: true,\n  isFetching: false,\n  movies: [],\n  genres: null,\n};\n\nexport const movieList = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_MOVIES_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case types.FETCH_MOVIES_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        hasMore: action.hasMore,\n        movies: [...state.movies, ...action.newMovies],\n      };\n    case LOCATION_CHANGE:\n      return {\n        ...state,\n        hasMore: true,\n        movies: [],\n      };\n    case types.FETCH_GENRES_REQUEST:\n      return {\n        ...state,\n      };\n    case types.FETCH_GENRES_SUCCESS:\n      return {\n        ...state,\n        genres: action.genres,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, applyMiddleware, createStore, compose } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport thunkMiddleware from 'redux-thunk';\n\nimport * as reducers from '../reducers';\n\nconst configureStore = history => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  return createStore(\n    combineReducers({\n      router: connectRouter(history),\n      ...reducers,\n    }),\n    composeEnhancers(\n      applyMiddleware(routerMiddleware(history), thunkMiddleware)\n    )\n  );\n};\nexport default configureStore;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const CUSTOM_THEME = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#a6bfcc',\n      main: '#778f9b',\n      dark: '#4a626d',\n      contrastText: '#263238',\n    },\n    secondary: {\n      light: '#be9c91',\n      main: '#8d6e63',\n      dark: '#5f4339',\n      contrastText: '#efebe9',\n    },\n  },\n});\n","import React from 'react';\n\nimport './Favourites.scss';\n\nconst Favourites = () => (\n  <div className=\"favourites\">\n    <h3>Favourites</h3>\n    {/* <ul>\n      {FAVOURITES.map((item, i) => (\n        <li key={i}>\n          <Link to={`/movies/${item}`}>{item}</Link>\n        </li>\n      ))}\n    </ul> */}\n  </div>\n);\n\nexport default Favourites;\n","export const getPathName = state => state.router.location.pathname;\nexport const getMovieTitle = state => state.movieDetails.details.originalTitle;\n","import camelize from 'camelize';\n\nexport const callApi = (url, options) =>\n  fetch(url, options)\n    .then(\n      response =>\n        response.ok ? response.json() : Promise.reject(response.text()),\n      error => Promise.reject(error)\n    )\n    .then(json => ({ json: camelize(json) }), error => ({ error }))\n    .catch(error => ({ error }));\n","const API_HOSTNAME = '//api.themoviedb.org/3';\nconst API_KEY = 'da9a74c438c0aec2e101b15f0c154ec4';\n\nconst constructUrl = url =>\n  `${API_HOSTNAME}${url}${\n    url.indexOf('?') === -1 ? '?' : '&'\n  }api_key=${API_KEY}`;\n\nexport const GENRE_LIST_URL = constructUrl('/genre/movie/list');\nexport const MOVIE_DETAILS_URL = constructUrl('/movie/:movieId');\nexport const POPULAR_MOVIES_URL = constructUrl('/movie/popular?page=:page');\nexport const SEARCH_MOVIES_URL = constructUrl(\n  '/search/movie?page=:page&query=:query'\n);\n\nexport const BASE_IMAGE_URL = '//image.tmdb.org/t/p';\n","import { schema } from 'normalizr';\n\nconst genre = new schema.Entity('genres');\n\ngenre.define({ genres: [genre] });\n\nexport const genreSchema = genre;\n","import { normalize } from 'normalizr';\n\nimport { callApi } from '../utils/ApiUtils';\nimport { POPULAR_MOVIES_URL, GENRE_LIST_URL } from '../constants/ApiConstants';\nimport * as types from '../constants/ActionTypes';\nimport { genreSchema } from '../constants/Schemas';\n\nexport const fetchMoviesRequest = () => ({\n  type: types.FETCH_MOVIES_REQUEST,\n});\n\nexport const fetchMoviesSuccess = json => ({\n  type: types.FETCH_MOVIES_SUCCESS,\n  hasMore: json.page < json.totalPages,\n  newMovies: json.results,\n});\n\nexport const fetchPopularMovies = page => async dispatch => {\n  dispatch(fetchMoviesRequest());\n  const { json } = await callApi(POPULAR_MOVIES_URL.replace(':page', page));\n  dispatch(fetchMoviesSuccess(json));\n};\n\nconst fetchGenresListRequest = () => ({\n  type: types.FETCH_GENRES_REQUEST,\n});\n\nconst fetchGenresListSuccess = ({ genres }) => ({\n  type: types.FETCH_GENRES_SUCCESS,\n  genres,\n});\n\nexport const fetchGenresList = () => async dispatch => {\n  dispatch(fetchGenresListRequest());\n  const { json } = await callApi(GENRE_LIST_URL);\n\n  const { entities } = normalize(json, genreSchema);\n\n  dispatch(fetchGenresListSuccess(entities));\n};\n","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nimport './Search.scss';\n\nclass Search extends Component {\n  onSubmit = ev => {\n    ev.preventDefault();\n    const query = ev.target.search.value;\n    const { searchMovies } = this.props;\n    searchMovies(query);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"search\">\n        <TextField\n          id=\"search\"\n          label=\"Search movies\"\n          type=\"search\"\n          className=\"search__input\"\n          autoComplete=\"off\"\n        />\n      </form>\n    );\n  }\n}\n\nSearch.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","import { connect } from 'react-redux';\nimport React from 'react';\n\nimport { searchMovies } from '../actions/SearchActions';\nimport Search from '../components/Search';\n\nconst SearchContainer = props => <Search {...props} />;\n\nconst mapDispatchToProps = dispatch => ({\n  searchMovies: query => dispatch(searchMovies(query)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchContainer);\n","import { push } from 'connected-react-router';\n\nimport { callApi } from '../utils/ApiUtils';\nimport { getPathName } from '../selectors/CommonSelectors';\nimport { SEARCH_MOVIES_URL } from '../constants/ApiConstants';\nimport { fetchMoviesRequest, fetchMoviesSuccess } from './MovieListActions';\n\nexport const fetchSearchMovies = (page, query) => async dispatch => {\n  dispatch(fetchMoviesRequest());\n  const { json } = await callApi(\n    SEARCH_MOVIES_URL.replace(':page', page).replace(':query', query)\n  );\n  dispatch(fetchMoviesSuccess(json));\n};\n\nexport const searchMovies = query => (dispatch, getState) => {\n  const path = getPathName(getState());\n  const nextPath = `/search/${query}`;\n  if (path !== nextPath) dispatch(push(nextPath));\n};\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SearchContainer from '../../containers/SearchContainer';\nimport { POPULAR_PATH } from '../../constants/RouterConstants';\n\nimport './Header.scss';\n\nconst disableLink = e => e.preventDefault();\n\nconst Header = ({ subheading, currentPathName }) => (\n  <header className=\"header\">\n    <h2 className=\"header__heading\">\n      <Link\n        to={POPULAR_PATH}\n        onClick={POPULAR_PATH === currentPathName ? disableLink : null}\n      >\n        themoviedb-app\n      </Link>{' '}\n      / {subheading}\n    </h2>\n    <SearchContainer />\n  </header>\n);\n\nHeader.propTypes = {\n  subheading: PropTypes.string.isRequired,\n  currentPathName: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","export const MOVIE_DETAILS_PATH = '/movies/:movieId';\nexport const POPULAR_PATH = '/popular';\nexport const SEARCH_PATH = '/search/:query';\n","import { connect } from 'react-redux';\nimport React from 'react';\n\nimport { getMovieTitle, getPathName } from '../selectors/CommonSelectors';\n\nimport Header from '../components/Header';\n\nconst HeaderContainer = props => <Header {...props} />;\n\nconst constructSubHeading = state => {\n  const pathName = getPathName(state);\n  switch (true) {\n    case /^\\/popular$/.test(pathName):\n      return 'popular films';\n    case /^\\/movie/.test(pathName):\n      return `movie details / ${getMovieTitle(state)}`;\n    case /^\\/search/.test(pathName):\n      return `search / '${pathName.slice(8)}'`;\n    default:\n      return '';\n  }\n};\n\nconst mapStateToProps = state => ({\n  subheading: constructSubHeading(state),\n  currentPathName: getPathName(state),\n});\n\nexport default connect(mapStateToProps)(HeaderContainer);\n","import { callApi } from '../utils/ApiUtils';\nimport * as types from '../constants/ActionTypes';\nimport { MOVIE_DETAILS_URL } from '../constants/ApiConstants';\n\nconst fetchMovieDetailsRequest = () => ({\n  type: types.FETCH_MOVIE_DETAILS_REQUEST,\n});\n\nconst fetchMovieDetailsSuccess = json => ({\n  type: types.FETCH_MOVIE_DETAILS_SUCCESS,\n  currentMovieId: json.id,\n  details: json,\n});\n\nexport const fetchMovieDetails = movieId => async dispatch => {\n  dispatch(fetchMovieDetailsRequest());\n  const { json } = await callApi(\n    MOVIE_DETAILS_URL.replace(':movieId', movieId)\n  );\n  dispatch(fetchMovieDetailsSuccess(json));\n};\n","import PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\n\nimport { BASE_IMAGE_URL } from '../../constants/ApiConstants';\n\nimport './MovieDetails.scss';\n\nclass MovieDetails extends Component {\n  componentDidMount() {\n    const { fetchMovieDetails } = this.props;\n    fetchMovieDetails();\n  }\n\n  render() {\n    const { details, isFetching } = this.props;\n\n    return (\n      <section className=\"section movie-details__section\">\n        {isFetching ? (\n          <div className=\"loader\">Loading ...</div>\n        ) : (\n          <Fragment>\n            <img\n              className=\"movie-details__poster\"\n              src={`${BASE_IMAGE_URL}/w780${details.posterPath}`}\n              alt={`${details.title} poster`}\n              width=\"390px\"\n            />\n            <article className=\"movie-details__article\">\n              <h2 className=\"movie-details__title\">{details.title}</h2>\n              <p className=\"movie-details__budget\">Budget: ${details.budget}</p>\n              <p className=\"movie-details__popularity\">\n                Popularity: {details.popularity}\n              </p>\n              <p className=\"movie-details__countries\">\n                Countries:{' '}\n                {details.productionCountries\n                  .map(country => country.iso31661)\n                  .join()}\n              </p>\n              <p>Release date: {details.releaseDate}</p>\n              <h3>Storyline</h3>\n              <p>{details.overview}</p>\n            </article>\n          </Fragment>\n        )}\n      </section>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  details: PropTypes.object.isRequired,\n  fetchMovieDetails: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n};\n\nexport default MovieDetails;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { fetchMovieDetails } from '../actions/MovieDetailsActions';\nimport MovieDetails from '../components/MovieDetails';\n\nconst MovieDetailsContainer = props => <MovieDetails {...props} />;\n\nMovieDetailsContainer.propTypes = {\n  fetchMovieDetails: PropTypes.func.isRequired,\n  details: PropTypes.object.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  details: state.movieDetails.details,\n  isFetching: state.movieDetails.isFetching,\n});\n\nconst mapDispatchToProps = (dispatch, onwProps) => ({\n  fetchMovieDetails: () =>\n    dispatch(fetchMovieDetails(onwProps.match.params.movieId)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MovieDetailsContainer);\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport { BASE_IMAGE_URL } from '../../constants/ApiConstants';\nimport { MOVIE_DETAILS_PATH } from '../../constants/RouterConstants';\n\nimport './Card.scss';\n\nconst Card = ({ id, posterPath, title, genres, genreIds }) => (\n  <article className=\"movieList__movie-card\">\n    <Link to={MOVIE_DETAILS_PATH.replace(':movieId', id)}>\n      <img\n        src={`${BASE_IMAGE_URL}/w400${posterPath}`}\n        alt={`${title} poster`}\n        width=\"200px\"\n      />\n      <Typography variant=\"subheading\" gutterBottom>\n        {title}\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        {genreIds.map(genreId => genres[genreId].name).join(', ')}\n      </Typography>\n    </Link>\n  </article>\n);\n\nCard.propTypes = {\n  genreIds: PropTypes.array.isRequired,\n  genres: PropTypes.object.isRequired,\n  id: PropTypes.number.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Card;\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\n\nimport Card from '../Card';\n\nimport './MovieList.scss';\n\nconst MovieList = ({ movies, genres }) => (\n  <section className=\"section movieList__section\">\n    <div className=\"movieList__wrapper\">\n      {movies.map(({ id, posterPath, title, genreIds }) => (\n        <Card\n          genreIds={genreIds}\n          genres={genres}\n          id={id}\n          key={id}\n          posterPath={posterPath}\n          title={title}\n        />\n      ))}\n    </div>\n  </section>\n);\n\nMovieList.propTypes = {\n  genres: PropTypes.object.isRequired,\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MovieList;\n","import { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport { fetchSearchMovies } from '../actions/SearchActions';\nimport {\n  fetchGenresList,\n  fetchPopularMovies,\n} from '../actions/MovieListActions';\nimport MovieList from '../components/MovieList';\n\nclass MovieListContainer extends Component {\n  componentDidMount() {\n    const { genres, getGenres } = this.props;\n    if (!genres) getGenres();\n  }\n\n  render() {\n    const {\n      movies,\n      loadMovies,\n      hasMore,\n      genres,\n      isFetching,\n      match,\n    } = this.props;\n    if (!genres) return null;\n\n    const loader = (\n      <div className=\"loader\" key=\"loader\">\n        Loading ...\n      </div>\n    );\n\n    return (\n      <InfiniteScroll\n        key={match.params.query} // reset infinite scroll counter on query change\n        hasMore={isFetching ? false : hasMore}\n        loader={loader}\n        loadMore={loadMovies}\n      >\n        <MovieList movies={movies} genres={genres} />\n      </InfiniteScroll>\n    );\n  }\n}\n\nMovieListContainer.propTypes = {\n  genres: PropTypes.object,\n  getGenres: PropTypes.func.isRequired,\n  hasMore: PropTypes.bool.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  loadMovies: PropTypes.func.isRequired,\n  match: PropTypes.object.isRequired,\n  movies: PropTypes.array.isRequired,\n};\n\nMovieListContainer.defaultProps = {\n  genres: null,\n};\n\nconst mapStateToProps = state => ({\n  movies: state.movieList.movies,\n  hasMore: state.movieList.hasMore,\n  isFetching: state.movieList.isFetching,\n  genres: state.movieList.genres,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { query } = ownProps.match.params;\n  return {\n    loadMovies: query\n      ? page => dispatch(fetchSearchMovies(page, query))\n      : page => dispatch(fetchPopularMovies(page)),\n    getGenres: () => dispatch(fetchGenresList()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MovieListContainer);\n","import { ConnectedRouter } from 'connected-react-router';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { Provider } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { createHashHistory } from 'history';\nimport React, { Fragment } from 'react';\n\nimport configureStore from './store/configureStore';\n\nimport {\n  MOVIE_DETAILS_PATH,\n  POPULAR_PATH,\n  SEARCH_PATH,\n} from './constants/RouterConstants';\nimport { CUSTOM_THEME } from './constants/MuiConstants';\n\nimport Favourites from './components/Favourites';\nimport HeaderContainer from './containers/HeaderContainer';\nimport MovieDetailsContainer from './containers/MovieDetailsContainer';\nimport MovieListContainer from './containers/MovieListContainer';\n\nimport './App.scss';\n\nconst history = createHashHistory();\nconst store = configureStore(history);\n\nconst App = () => (\n  <MuiThemeProvider theme={CUSTOM_THEME}>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Fragment>\n          <HeaderContainer />\n          <Favourites />\n          <main className=\"main\">\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to={POPULAR_PATH} />}\n            />\n            <Route exact path={POPULAR_PATH} component={MovieListContainer} />\n            <Route path={SEARCH_PATH} component={MovieListContainer} />\n            <Route\n              path={MOVIE_DETAILS_PATH}\n              component={MovieDetailsContainer}\n            />\n          </main>\n        </Fragment>\n      </ConnectedRouter>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}